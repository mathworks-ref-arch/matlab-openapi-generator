{{! Copyright notice should not propagate to generated code, as it applies to this mustache file}}
{{! Copyright 2020-2023 The MathWorks, Inc.}}
{{#operations}}
classdef {{classname}} < {{packageName}}.BaseClient
    {{! Output the tag values just once, normally the same for every method}}
    % {{classname}}{{#description}} {{.}}{{/description}}{{^description}} No description provided{{/description}}{{#tags}}{{#externalDocs}}
    % Info: {{description}}: {{url}}{{/externalDocs}}{{/tags}}
    %
    % {{classname}} Properties:
    %
    %   serverUri           - Base URI to use when calling the API. Allows using a different server
    %                         than specified in the original API spec.
    %   httpOptions         - HTTPOptions used by all requests.
    %   preferredAuthMethod - If operation supports multiple authentication methods, specified which
    %                         method to prefer.
    %   bearerToken         - If Bearer token authentication is used, the token can be supplied 
    %                         here. Note the token is only used if operations are called for which
    %                         the API explicitly specified that Bearer authentication is supported.
    %                         If this has not been specified in the spec but most operations do 
    %                         require Bearer authentication, consider adding the relevant header to
    %                         all requests in the preSend method.
    %   apiKey              - If API key authentication is used, the key can be supplied here. 
    %                         Note the key is only used if operations are called for which
    %                         the API explicitly specified that API key authentication is supported.
    %                         If this has not been specified in the spec but most operations do 
    %                         require API key authentication, consider adding the API key to all
    %                         requests in the preSend method.
    %   httpCredentials     - If Basic or Digest authentication is supported username/password
    %                         credentials can be supplied here as matlab.net.http.Credentials. Note 
    %                         these are only actively used if operations are called for which the 
    %                         API spec has specified they require Basic authentication. If this has
    %                         not been specified in the spec but most operations do require
    %                         Basic authentication, consider setting the Credentials property in the
    %                         httpOptions rather than through httpCredentials.
    %   cookies             - Cookie jar. The cookie jar is shared across all Api classes in the 
    %                         same package. All responses are automatically parsed for Set-Cookie
    %                         headers and cookies are automatically added to the jar. Similarly
    %                         cookies are added to outgoing requests if there are matching cookies 
    %                         in the jar for the given request. Cookies can also be added manually
    %                         by calling the setCookies method on the cookies property. The cookie
    %                         jar is also saved to disk (cookies.mat in the same directory as 
    %                         BaseClient) and reloaded in new MATLAB sessions.
    %
    % {{classname}} Methods:
    %
    %   {{classname}} - Constructor{{#operation}}
    %   {{operationId}} - {{summary}}{{/operation}}
    %
    % See Also: matlab.net.http.HTTPOptions, matlab.net.http.Credentials, 
    %   CookieJar.setCookies, {{packageName}}.BaseClient

    % This file is automatically generated using OpenAPI
    % Specification version: {{version}}
    % MATLAB Generator for OpenAPI version: {{packageVersion}}
    {{>copyrightNotice}}

    % Instruct MATLAB Code Analyzer to ignore unnecessary brackets
    %#ok<*NBRAK2> 

    % Class properties
    properties
    end

    % Class methods
    methods
        function obj = {{classname}}(options)
            % {{classname}} Constructor, creates a {{classname}} instance.
            % When called without inputs, tries to load configuration
            % options from JSON file '{{packageName}}.Client.Settings.json'.
            % If this file is not present, the instance is initialized with 
            % default configuration option. An alternative configuration 
            % file can be provided through the "configFile" Name-Value pair.
            % All other properties of the instance can also be overridden 
            % using Name-Value pairs where Name equals the property name.
            % 
            % Examples:
            %
            %   % Create a client with default options and serverUri
            %   % as parsed from OpenAPI spec (if available)
            %   client = {{apiPackage}}.{{classname}}();
            %
            %   % Create a client for alternative server/base URI
            %   client = {{apiPackage}}.{{classname}}("serverUri","https://example.com:1234/api/");
            %
            %   % Create a client loading configuration options from 
            %   % JSON configuration file
            %   client = {{apiPackage}}.{{classname}}("configFile","myconfig.json");
            %
            %   % Create a client with alternative HTTPOptions and an API key
            %   client = {{apiPackage}}.{{classname}}("httpOptions",...
            %       matlab.net.http.HTTPOptions("ConnectTimeout",42),...
            %       "apiKey", "ABC123");

            {{> clientarguments}}
            % Call base constructor to override any configured settings
            args = namedargs2cell(options);
            obj@{{packageName}}.BaseClient(args{:})
        end

    {{#operation}}
        function [code, result, response] = {{operationId}}(obj{{#requiredParams}}{{^vendorExtensions.x-is-object-param}}, {{paramName}}{{/vendorExtensions.x-is-object-param}}{{/requiredParams}}{{#optionalParams}}{{#-first}}, optionals{{/-first}}{{/optionalParams}})
            {{>operation_help_text}}
            arguments
              obj {{apiPackage}}.{{classname}}{{#requiredParams}}{{^vendorExtensions.x-is-object-param}}
              {{paramName}} {{>paramtype}}{{/vendorExtensions.x-is-object-param}}{{/requiredParams}}{{#optionalParams}}{{^vendorExtensions.x-is-object-param}}
              optionals.{{paramName}} {{>paramtype}}{{/vendorExtensions.x-is-object-param}}{{/optionalParams}}
            end

            % Create the request object
            request = matlab.net.http.RequestMessage();
            
            {{^produces}}% No return content type specified, defaulting to JSON
            request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');{{/produces}}{{#produces}}{{#-first}}% Verify that operation supports returning JSON
            specAcceptHeaders = [...{{/-first}}
                "{{mediaType}}", ...{{#-last}}
            ];
            if ismember("application/json",specAcceptHeaders)
                request.Header(end+1) = matlab.net.http.field.AcceptField('application/json');
            else
                error("{{vendorExtensions.x-error-identifier}}:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' MediaType.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","{{operationId}}")
            end{{/-last}}{{/produces}}
            
            {{^consumes}}% No body input, so no need to check its content type{{/consumes}}{{#consumes}}{{#-first}}% Verify that operation supports JSON or FORM as input
            specContentTypeHeaders = [...{{/-first}}
                "{{mediaType}}", ...{{#-last}}
            ];
            if ismember("application/json",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/json');
            elseif ismember("application/x-www-form-urlencoded",specContentTypeHeaders)
                request.Header(end+1) = matlab.net.http.field.ContentTypeField('application/x-www-form-urlencoded');
            else
                error("{{vendorExtensions.x-error-identifier}}:UnsupportedMediaType","Generated OpenAPI Classes only support 'application/json' and 'application/x-www-form-urlencoded' MediaTypes.\n" + ...
                    "Operation '%s' does not support this. It may be possible to call this operation by first editing the generated code.","{{operationId}}")
            end{{/-last}}{{/consumes}}
            
            {{^headerParams}}% No header parameters{{/headerParams}}{{#headerParams}}{{#-first}}% Add header parameters{{/-first}}{{#required}}
            request.Header(end+1) = matlab.net.http.HeaderField('{{baseName}}', {{>paramName}});{{/required}}{{^required}}
            if isfield(optionals,"{{paramName}}"), request.Header(end+1) = matlab.net.http.HeaderField('{{baseName}}', optionals.{{paramName}}); end{{/required}}{{/headerParams}}

            % Configure default httpOptions
            httpOptions = obj.httpOptions;
            % Never convert API response
            httpOptions.ConvertResponse = false;

            % Configure request verb/method
            request.Method = matlab.net.http.RequestMethod('{{httpMethod}}');

            % Build the request URI
            if ~isempty(obj.serverUri)
                % If URI specified in object, use that
                uri = obj.serverUri;
            else
                % If no server specified use base path from OpenAPI spec
                uri = matlab.net.URI("{{basePath}}");
            end
            % Append the operation end-point
            uri.EncodedPath = uri.EncodedPath + "{{path}}";

            {{^pathParams}}% No path parameters{{/pathParams}}{{#pathParams}}{{#-first}}% Substitute path parameters{{/-first}}
            uri.Path = replace(uri.Path, "{" + "{{baseName}}" + "}", {{>paramName}});{{/pathParams}}

            {{^queryParams}}% No query parameters{{/queryParams}}{{#queryParams}}{{#-first}}% Set query parameters{{/-first}}{{#required}}
            uri.Query(end+1) = matlab.net.QueryParameter("{{baseName}}", {{>paramName}}{{#isCollectionFormatMulti}}, matlab.net.ArrayFormat.repeating{{/isCollectionFormatMulti}});{{/required}}{{^required}}
            if isfield(optionals, "{{paramName}}"), uri.Query(end+1) = matlab.net.QueryParameter("{{baseName}}", optionals.{{paramName}}{{#isCollectionFormatMulti}}, matlab.net.ArrayFormat.repeating{{/isCollectionFormatMulti}}); end{{/required}}{{/queryParams}}
            
            {{^bodyParam}}% No JSON body parameters{{/bodyParam}}{{#bodyParam}}% Set JSON Body
            requiredProperties = [...{{#vars}}{{#required}}
                "{{name}}",...{{/required}}{{/vars}}
            ];
            optionalProperties = [...{{#vars}}{{^required}}
                "{{name}}",...{{/required}}{{/vars}}
            ];{{^required}}
            if isfield(optionals,"{{paramName}}"){{/required}}
            {{^required}}  {{/required}}request.Body(1).Payload = {{^required}}optionals.{{/required}}{{paramName}}.get{{#isArray}}Array{{/isArray}}Payload(requiredProperties,optionalProperties);{{^required}}
            else
              request.Body(1).Payload = "{}";
            end{{/required}}{{/bodyParam}}

            {{^formParams}}% No form body parameters{{/formParams}}{{#formParams}}{{#-first}}% Set form Body
            params = matlab.net.QueryParameter.empty;{{/-first}}{{#required}}
            params(end+1) = matlab.net.QueryParameter("{{baseName}}", {{>paramName}});{{/required}}{{^required}}
            if isfield(optionals, "{{paramName}}"), params(end+1) = matlab.net.QueryParameter("{{baseName}}", optionals.{{paramName}}); end{{/required}}{{#-last}}
            request.Body(1).Data = params;{{/-last}}{{/formParams}}

            {{^authMethods}}% Operation does not require authorization{{/authMethods}}{{#authMethods}}{{#-first}}% Configure Authentication
            authNames = [...{{/-first}}
                "{{name}}", ...{{#-last}}
            ];  
            [request, httpOptions, uri] = obj.requestAuth(authNames, request, httpOptions, uri);{{/-last}}{{/authMethods}}

            % Add cookies if set
            request = obj.applyCookies(request, uri);

            % Call preSend
            [request, httpOptions, uri] = obj.preSend("{{operationId}}", request, httpOptions, uri);

            % Perform the request
            [response, ~, history] = send(request, uri, httpOptions);

            % Handle cookies if set
            obj.setCookies(history);

            % Call postSend
            response = obj.postSend("{{operationId}}", response, request, uri, httpOptions);

            % Handle response
            code = response.StatusCode;
            switch (code){{#responses}}{{^range}}{{^isDefault}}
                case {{code}}
                    {{>handleoutput}}{{/isDefault}}{{/range}}{{/responses}}{{#responses}}{{#range}}
                case {{#is1xx}}matlab.net.http.StatusClass.Informational %1XX{{/is1xx}}{{#is2xx}}matlab.net.http.StatusClass.Successful %2XX{{/is2xx}}{{#is3xx}}matlab.net.http.StatusClass.Redirection %3XX{{/is3xx}}{{#is4xx}}matlab.net.http.StatusClass.ClientError %4XX{{/is4xx}}{{#is5xx}}matlab.net.http.StatusClass.ServerError %5XX{{/is5xx}}
                    {{>handleoutput}}{{/range}}{{/responses}}{{^hasDefaultResponse}}
                otherwise % Unexpected output, not declared in spec
                    % Any response in the OK range will not throw a warning
                    if (int32(response.StatusCode) < 200 || int32(response.StatusCode) >= 300)
                        % Others will throw a warning
                        warning("{{vendorExtensions.x-error-identifier}}:UndocumentedResponse","Operation '%s' returned an undocumented response code '%d'.\n" + ...
                            "Response Body is returned as raw data.","{{operationId}}",code);
                    end
                    % Return the raw body data
                    result = response.Body.Data;{{/hasDefaultResponse}}{{#hasDefaultResponse}}
                otherwise % Default output as specified in spec{{#responses}}{{#isDefault}}
                    {{>handleoutput}}{{/isDefault}}{{/responses}}{{/hasDefaultResponse}}
            end
        
        end % {{operationId}} method

        {{/operation}}
    end %methods
end %class

{{/operations}}

