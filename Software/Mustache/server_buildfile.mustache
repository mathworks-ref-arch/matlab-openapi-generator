function plan = buildfile
    % Start a new buildplan
    plan = buildplan();
    
    % Add the build task, this compiles the server code into a CTF archive.
    % The task is configured to include the main server.m, all code from
    % the package directory (including models, method implementations and
    % helper code) as well as the OpenAPI spec in both JSON and YAML
    % formats. If a directory named "swagger" exists it it included as
    % well. The output by default is written to a directory named "dist",
    % this can be customized below.
    plan("build") = matlab.buildtool.Task( ...
        Description="Build the CTF-archive",...
        Actions = @buildArchive, ...
        Inputs=[ ...
            "server.m", ...
            "+{{topLevelPackageName}}", ...
            "openapi.json","openapi.yaml", ...
            hasSwagger(),...
            "routes.json" ...
        ], ...
        Outputs="dist" ...
    );

    % Add the microservice task, this can package a CTF created by the
    % build task into a microservice Docker image. The task can be called
    % with a string input to specify the image name/tag. E.g.
    %
    % >> buildtool microservice("my-image-tag:latest")
    %
    % If no tag name is specified, the package name is used by default.    
    plan("microservice") = matlab.buildtool.Task( ...
        Description="Package as Microservice Docker Image",...
        Dependencies="build",...
        Actions=@packageMicroservice, ...
        Inputs=[ ...
            plan("build").Outputs(end), ...
            "routes.json"
        ] ...
    );

    % Add a clean task
    plan("clean") = matlab.buildtool.tasks.CleanTask();

end

function buildArchive(context)
    arguments
        context matlab.buildtool.TaskContext
    end
    % Perform the build using the provided inputs 
    buildResult = compiler.build.productionServerArchive( ...
        context.Task.Inputs(1).Path, ...
        AdditionalFiles=[context.Task.Inputs(2:end-1).Path], ...
        ArchiveName="{{topLevelPackageName}}", ...
        OutputDir=context.Task.Outputs(1).Path ...
    );
    % Save the build results to a MAT-file in the same output directory,
    % the microservice task needs this information later    
    save(fullfile(context.Task.Outputs(end).Path,"build.mat"), ...
         "buildResult");
end

function packageMicroservice(context,imageName)
    arguments
        context matlab.buildtool.TaskContext
        imageName string = "{{#lambda.lowercase}}{{topLevelPackageName}}{{/lambda.lowercase}}"
    end
    % Load the build results from the MAT-file
    b = load(fullfile(context.Task.Inputs(1).Path,"build.mat"));
    % Build the image
    compiler.package.microserviceDockerImage( ...
        b.buildResult, ...
        RoutesFile=context.Task.Inputs(end).Path, ...
        ImageName=imageName...
    );
end

function s = hasSwagger()
    % Helper function to determine whether a directory named "swagger"
    % exists, if so the function returns "swagger" such that it can be
    % included as part of the build. If the directory does not exists an
    % empty string is returned, resulting in the build not trying to add
    % the directory.
    s = string.empty;
    if isfolder("swagger")
        s = "swagger";
    end
end
